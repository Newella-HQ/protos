// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.24.4
// source: usernovels/usernovels.proto

package usernovels

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserNovelsService_GetUsersNovels_FullMethodName      = "/usernovels.UserNovelsService/GetUsersNovels"
	UserNovelsService_SetNovelRating_FullMethodName      = "/usernovels.UserNovelsService/SetNovelRating"
	UserNovelsService_GetNovelComments_FullMethodName    = "/usernovels.UserNovelsService/GetNovelComments"
	UserNovelsService_CommentNovel_FullMethodName        = "/usernovels.UserNovelsService/CommentNovel"
	UserNovelsService_DeleteCommentNovel_FullMethodName  = "/usernovels.UserNovelsService/DeleteCommentNovel"
	UserNovelsService_GetUserComplains_FullMethodName    = "/usernovels.UserNovelsService/GetUserComplains"
	UserNovelsService_ComplainNovel_FullMethodName       = "/usernovels.UserNovelsService/ComplainNovel"
	UserNovelsService_DeleteComplainNovel_FullMethodName = "/usernovels.UserNovelsService/DeleteComplainNovel"
)

// UserNovelsServiceClient is the client API for UserNovelsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserNovelsServiceClient interface {
	GetUsersNovels(ctx context.Context, in *GetUsersNovelsRequest, opts ...grpc.CallOption) (*GetUsersNovelsResponse, error)
	SetNovelRating(ctx context.Context, in *SetNovelRatingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetNovelComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error)
	CommentNovel(ctx context.Context, in *CommentNovelRequest, opts ...grpc.CallOption) (*CommentNovelResponse, error)
	DeleteCommentNovel(ctx context.Context, in *DeleteCommentNovelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserComplains(ctx context.Context, in *GetUserComplainsRequest, opts ...grpc.CallOption) (*GetUserComplainsResponse, error)
	ComplainNovel(ctx context.Context, in *ComplainNovelRequest, opts ...grpc.CallOption) (*ComplainNovelResponse, error)
	DeleteComplainNovel(ctx context.Context, in *DeleteComplainNovelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userNovelsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserNovelsServiceClient(cc grpc.ClientConnInterface) UserNovelsServiceClient {
	return &userNovelsServiceClient{cc}
}

func (c *userNovelsServiceClient) GetUsersNovels(ctx context.Context, in *GetUsersNovelsRequest, opts ...grpc.CallOption) (*GetUsersNovelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersNovelsResponse)
	err := c.cc.Invoke(ctx, UserNovelsService_GetUsersNovels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNovelsServiceClient) SetNovelRating(ctx context.Context, in *SetNovelRatingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserNovelsService_SetNovelRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNovelsServiceClient) GetNovelComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentsResponse)
	err := c.cc.Invoke(ctx, UserNovelsService_GetNovelComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNovelsServiceClient) CommentNovel(ctx context.Context, in *CommentNovelRequest, opts ...grpc.CallOption) (*CommentNovelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentNovelResponse)
	err := c.cc.Invoke(ctx, UserNovelsService_CommentNovel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNovelsServiceClient) DeleteCommentNovel(ctx context.Context, in *DeleteCommentNovelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserNovelsService_DeleteCommentNovel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNovelsServiceClient) GetUserComplains(ctx context.Context, in *GetUserComplainsRequest, opts ...grpc.CallOption) (*GetUserComplainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserComplainsResponse)
	err := c.cc.Invoke(ctx, UserNovelsService_GetUserComplains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNovelsServiceClient) ComplainNovel(ctx context.Context, in *ComplainNovelRequest, opts ...grpc.CallOption) (*ComplainNovelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComplainNovelResponse)
	err := c.cc.Invoke(ctx, UserNovelsService_ComplainNovel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNovelsServiceClient) DeleteComplainNovel(ctx context.Context, in *DeleteComplainNovelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserNovelsService_DeleteComplainNovel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserNovelsServiceServer is the server API for UserNovelsService service.
// All implementations must embed UnimplementedUserNovelsServiceServer
// for forward compatibility
type UserNovelsServiceServer interface {
	GetUsersNovels(context.Context, *GetUsersNovelsRequest) (*GetUsersNovelsResponse, error)
	SetNovelRating(context.Context, *SetNovelRatingRequest) (*emptypb.Empty, error)
	GetNovelComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error)
	CommentNovel(context.Context, *CommentNovelRequest) (*CommentNovelResponse, error)
	DeleteCommentNovel(context.Context, *DeleteCommentNovelRequest) (*emptypb.Empty, error)
	GetUserComplains(context.Context, *GetUserComplainsRequest) (*GetUserComplainsResponse, error)
	ComplainNovel(context.Context, *ComplainNovelRequest) (*ComplainNovelResponse, error)
	DeleteComplainNovel(context.Context, *DeleteComplainNovelRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserNovelsServiceServer()
}

// UnimplementedUserNovelsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserNovelsServiceServer struct {
}

func (UnimplementedUserNovelsServiceServer) GetUsersNovels(context.Context, *GetUsersNovelsRequest) (*GetUsersNovelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersNovels not implemented")
}
func (UnimplementedUserNovelsServiceServer) SetNovelRating(context.Context, *SetNovelRatingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNovelRating not implemented")
}
func (UnimplementedUserNovelsServiceServer) GetNovelComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNovelComments not implemented")
}
func (UnimplementedUserNovelsServiceServer) CommentNovel(context.Context, *CommentNovelRequest) (*CommentNovelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentNovel not implemented")
}
func (UnimplementedUserNovelsServiceServer) DeleteCommentNovel(context.Context, *DeleteCommentNovelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentNovel not implemented")
}
func (UnimplementedUserNovelsServiceServer) GetUserComplains(context.Context, *GetUserComplainsRequest) (*GetUserComplainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserComplains not implemented")
}
func (UnimplementedUserNovelsServiceServer) ComplainNovel(context.Context, *ComplainNovelRequest) (*ComplainNovelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComplainNovel not implemented")
}
func (UnimplementedUserNovelsServiceServer) DeleteComplainNovel(context.Context, *DeleteComplainNovelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComplainNovel not implemented")
}
func (UnimplementedUserNovelsServiceServer) mustEmbedUnimplementedUserNovelsServiceServer() {}

// UnsafeUserNovelsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserNovelsServiceServer will
// result in compilation errors.
type UnsafeUserNovelsServiceServer interface {
	mustEmbedUnimplementedUserNovelsServiceServer()
}

func RegisterUserNovelsServiceServer(s grpc.ServiceRegistrar, srv UserNovelsServiceServer) {
	s.RegisterService(&UserNovelsService_ServiceDesc, srv)
}

func _UserNovelsService_GetUsersNovels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersNovelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNovelsServiceServer).GetUsersNovels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserNovelsService_GetUsersNovels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNovelsServiceServer).GetUsersNovels(ctx, req.(*GetUsersNovelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNovelsService_SetNovelRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNovelRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNovelsServiceServer).SetNovelRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserNovelsService_SetNovelRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNovelsServiceServer).SetNovelRating(ctx, req.(*SetNovelRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNovelsService_GetNovelComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNovelsServiceServer).GetNovelComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserNovelsService_GetNovelComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNovelsServiceServer).GetNovelComments(ctx, req.(*GetCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNovelsService_CommentNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentNovelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNovelsServiceServer).CommentNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserNovelsService_CommentNovel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNovelsServiceServer).CommentNovel(ctx, req.(*CommentNovelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNovelsService_DeleteCommentNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentNovelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNovelsServiceServer).DeleteCommentNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserNovelsService_DeleteCommentNovel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNovelsServiceServer).DeleteCommentNovel(ctx, req.(*DeleteCommentNovelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNovelsService_GetUserComplains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserComplainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNovelsServiceServer).GetUserComplains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserNovelsService_GetUserComplains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNovelsServiceServer).GetUserComplains(ctx, req.(*GetUserComplainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNovelsService_ComplainNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplainNovelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNovelsServiceServer).ComplainNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserNovelsService_ComplainNovel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNovelsServiceServer).ComplainNovel(ctx, req.(*ComplainNovelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNovelsService_DeleteComplainNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteComplainNovelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNovelsServiceServer).DeleteComplainNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserNovelsService_DeleteComplainNovel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNovelsServiceServer).DeleteComplainNovel(ctx, req.(*DeleteComplainNovelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserNovelsService_ServiceDesc is the grpc.ServiceDesc for UserNovelsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserNovelsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usernovels.UserNovelsService",
	HandlerType: (*UserNovelsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsersNovels",
			Handler:    _UserNovelsService_GetUsersNovels_Handler,
		},
		{
			MethodName: "SetNovelRating",
			Handler:    _UserNovelsService_SetNovelRating_Handler,
		},
		{
			MethodName: "GetNovelComments",
			Handler:    _UserNovelsService_GetNovelComments_Handler,
		},
		{
			MethodName: "CommentNovel",
			Handler:    _UserNovelsService_CommentNovel_Handler,
		},
		{
			MethodName: "DeleteCommentNovel",
			Handler:    _UserNovelsService_DeleteCommentNovel_Handler,
		},
		{
			MethodName: "GetUserComplains",
			Handler:    _UserNovelsService_GetUserComplains_Handler,
		},
		{
			MethodName: "ComplainNovel",
			Handler:    _UserNovelsService_ComplainNovel_Handler,
		},
		{
			MethodName: "DeleteComplainNovel",
			Handler:    _UserNovelsService_DeleteComplainNovel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usernovels/usernovels.proto",
}
