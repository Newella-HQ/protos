// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.24.4
// source: user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserService_GetUser_FullMethodName          = "/user.UserService/GetUser"
	UserService_GetUsers_FullMethodName         = "/user.UserService/GetUsers"
	UserService_ChangeUsername_FullMethodName   = "/user.UserService/ChangeUsername"
	UserService_ChangeUserData_FullMethodName   = "/user.UserService/ChangeUserData"
	UserService_ChangePicture_FullMethodName    = "/user.UserService/ChangePicture"
	UserService_ChangeRole_FullMethodName       = "/user.UserService/ChangeRole"
	UserService_GetSubscribers_FullMethodName   = "/user.UserService/GetSubscribers"
	UserService_GetSubscriptions_FullMethodName = "/user.UserService/GetSubscriptions"
	UserService_Subscribe_FullMethodName        = "/user.UserService/Subscribe"
	UserService_Unsubscribe_FullMethodName      = "/user.UserService/Unsubscribe"
	UserService_DeleteSubscriber_FullMethodName = "/user.UserService/DeleteSubscriber"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	ChangeUsername(ctx context.Context, in *ChangeUsernameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChangeUserData(ctx context.Context, in *ChangeUserDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChangePicture(ctx context.Context, opts ...grpc.CallOption) (UserService_ChangePictureClient, error)
	ChangeRole(ctx context.Context, in *ChangeRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSubscribers(ctx context.Context, in *GetSubsRequest, opts ...grpc.CallOption) (*GetSubsResponse, error)
	GetSubscriptions(ctx context.Context, in *GetSubsRequest, opts ...grpc.CallOption) (*GetSubsResponse, error)
	Subscribe(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Unsubscribe(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteSubscriber(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, UserService_GetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUsername(ctx context.Context, in *ChangeUsernameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserService_ChangeUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUserData(ctx context.Context, in *ChangeUserDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserService_ChangeUserData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangePicture(ctx context.Context, opts ...grpc.CallOption) (UserService_ChangePictureClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], UserService_ChangePicture_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceChangePictureClient{ClientStream: stream}
	return x, nil
}

type UserService_ChangePictureClient interface {
	Send(*ChangePictureRequest) error
	CloseAndRecv() (*ChangePictureResponse, error)
	grpc.ClientStream
}

type userServiceChangePictureClient struct {
	grpc.ClientStream
}

func (x *userServiceChangePictureClient) Send(m *ChangePictureRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceChangePictureClient) CloseAndRecv() (*ChangePictureResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ChangePictureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) ChangeRole(ctx context.Context, in *ChangeRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserService_ChangeRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetSubscribers(ctx context.Context, in *GetSubsRequest, opts ...grpc.CallOption) (*GetSubsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubsResponse)
	err := c.cc.Invoke(ctx, UserService_GetSubscribers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetSubscriptions(ctx context.Context, in *GetSubsRequest, opts ...grpc.CallOption) (*GetSubsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubsResponse)
	err := c.cc.Invoke(ctx, UserService_GetSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Subscribe(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserService_Subscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Unsubscribe(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserService_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteSubscriber(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserService_DeleteSubscriber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	ChangeUsername(context.Context, *ChangeUsernameRequest) (*emptypb.Empty, error)
	ChangeUserData(context.Context, *ChangeUserDataRequest) (*emptypb.Empty, error)
	ChangePicture(UserService_ChangePictureServer) error
	ChangeRole(context.Context, *ChangeRoleRequest) (*emptypb.Empty, error)
	GetSubscribers(context.Context, *GetSubsRequest) (*GetSubsResponse, error)
	GetSubscriptions(context.Context, *GetSubsRequest) (*GetSubsResponse, error)
	Subscribe(context.Context, *SubRequest) (*emptypb.Empty, error)
	Unsubscribe(context.Context, *SubRequest) (*emptypb.Empty, error)
	DeleteSubscriber(context.Context, *SubRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserServiceServer) ChangeUsername(context.Context, *ChangeUsernameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUsername not implemented")
}
func (UnimplementedUserServiceServer) ChangeUserData(context.Context, *ChangeUserDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserData not implemented")
}
func (UnimplementedUserServiceServer) ChangePicture(UserService_ChangePictureServer) error {
	return status.Errorf(codes.Unimplemented, "method ChangePicture not implemented")
}
func (UnimplementedUserServiceServer) ChangeRole(context.Context, *ChangeRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeRole not implemented")
}
func (UnimplementedUserServiceServer) GetSubscribers(context.Context, *GetSubsRequest) (*GetSubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscribers not implemented")
}
func (UnimplementedUserServiceServer) GetSubscriptions(context.Context, *GetSubsRequest) (*GetSubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptions not implemented")
}
func (UnimplementedUserServiceServer) Subscribe(context.Context, *SubRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedUserServiceServer) Unsubscribe(context.Context, *SubRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedUserServiceServer) DeleteSubscriber(context.Context, *SubRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscriber not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUsername(ctx, req.(*ChangeUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUserData(ctx, req.(*ChangeUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangePicture_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).ChangePicture(&userServiceChangePictureServer{ServerStream: stream})
}

type UserService_ChangePictureServer interface {
	SendAndClose(*ChangePictureResponse) error
	Recv() (*ChangePictureRequest, error)
	grpc.ServerStream
}

type userServiceChangePictureServer struct {
	grpc.ServerStream
}

func (x *userServiceChangePictureServer) SendAndClose(m *ChangePictureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceChangePictureServer) Recv() (*ChangePictureRequest, error) {
	m := new(ChangePictureRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_ChangeRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeRole(ctx, req.(*ChangeRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetSubscribers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetSubscribers(ctx, req.(*GetSubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetSubscriptions(ctx, req.(*GetSubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Subscribe(ctx, req.(*SubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Unsubscribe(ctx, req.(*SubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteSubscriber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteSubscriber(ctx, req.(*SubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _UserService_GetUsers_Handler,
		},
		{
			MethodName: "ChangeUsername",
			Handler:    _UserService_ChangeUsername_Handler,
		},
		{
			MethodName: "ChangeUserData",
			Handler:    _UserService_ChangeUserData_Handler,
		},
		{
			MethodName: "ChangeRole",
			Handler:    _UserService_ChangeRole_Handler,
		},
		{
			MethodName: "GetSubscribers",
			Handler:    _UserService_GetSubscribers_Handler,
		},
		{
			MethodName: "GetSubscriptions",
			Handler:    _UserService_GetSubscriptions_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _UserService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _UserService_Unsubscribe_Handler,
		},
		{
			MethodName: "DeleteSubscriber",
			Handler:    _UserService_DeleteSubscriber_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChangePicture",
			Handler:       _UserService_ChangePicture_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "user/user.proto",
}
